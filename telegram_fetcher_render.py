import os
import asyncio
import logging
import time
from datetime import datetime
from zoneinfo import ZoneInfo
from telethon import TelegramClient, events
from telethon.sessions import StringSession
from storage_utils import save_to_supabase

# === –ß–ê–°–û–í–ê –ó–û–ù–ê ===
os.environ["TZ"] = "Europe/Kyiv"
try:
    time.tzset()
except Exception:
    pass
TZ = ZoneInfo("Europe/Kyiv")

# === LOGGING ===
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
    force=True
)

# === ENV ===
API_ID = int(os.getenv("TG_API_ID", "0"))
API_HASH = os.getenv("TG_API_HASH", "")
USER_SESSION = os.getenv("TG_USER_SESSION", "")
if not (API_ID and API_HASH and USER_SESSION):
    logging.error("‚ùå TG_API_ID / TG_API_HASH / TG_USER_SESSION –≤—ñ–¥—Å—É—Ç–Ω—ñ")
    raise SystemExit(1)

# === –ö–ê–ù–ê–õ–ò ===
CHANNELS = {
    "MIRVALUTY": "@mirvaluty",
    "GARANT": "@obmen_kyiv",
    "KIT_GROUP": "@obmenka_kievua",
    "CHANGE_KYIV": "@kiev_change",
    "VALUTA_KIEV": "@valuta_kiev",
    "UACOIN": "@uacoin",
    "SWAPS": "@Obmen_usd",
}


# === –î–û–ü–û–ú–Ü–ñ–ù–Ü ===
def local_time(dt):
    return dt.astimezone(TZ).strftime("%Y-%m-%d %H:%M:%S") if dt else ""


def build_block(channel, msg_id, ver, date, edited, text):
    """–§–æ—Ä–º–∞—Ç –±–ª–æ–∫—É —è–∫ —É –ª–æ–∫–∞–ª—å–Ω—ñ–π –≤–µ—Ä—Å—ñ—ó"""
    return (
        "=" * 100 + "\n"
        + f"[CHANNEL] {channel}\n"
        + f"[MESSAGE_ID] {msg_id}\n"
        + f"[VERSION] v{ver}\n"
        + f"[DATE] {date}\n"
        + (f"[EDITED] {edited}\n" if edited else "")
        + "-" * 100 + "\n"
        + (text.strip() if text else "[NO TEXT]") + "\n"
        + "=" * 100 + "\n\n"
    )


# === HEARTBEAT ===
async def heartbeat(versions):
    while True:
        total_msgs = sum(len(v) for v in versions.values())
        logging.info(f"üíì Worker alive ‚Äî –æ–±—Ä–æ–±–ª–µ–Ω–æ {total_msgs} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å")
        await asyncio.sleep(600)


# === –ì–û–õ–û–í–ù–ê ===
async def main():
    logging.info("üöÄ Telegram Fetcher (Render Worker) —Å—Ç–∞—Ä—Ç—É—î...")
    client = TelegramClient(StringSession(USER_SESSION), API_ID, API_HASH)

    async with client:
        me = await client.get_me()
        logging.info(f"‚úÖ Telegram –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ —è–∫: @{getattr(me, 'username', None) or me.id}")

        versions = {name: {} for name in CHANNELS}

        async def handle_message(msg, name, init_mode=False):
            txt = msg.message or ""
            mid = str(msg.id)
            date = local_time(msg.date)
            edited = local_time(msg.edit_date) if msg.edit_date else ""

            if mid in versions[name] and edited:
                versions[name][mid] += 1
                action = "–æ–Ω–æ–≤–ª–µ–Ω–æ —ñ—Å–Ω—É—é—á–µ"
            elif mid not in versions[name]:
                versions[name][mid] = 1
                action = "–Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"
            else:
                action = "–ø—Ä–æ–ø—É—â–µ–Ω–æ –±–µ–∑ –∑–º—ñ–Ω"
                return

            block = build_block(name, mid, versions[name][mid], date, edited, txt)
            await save_to_supabase(name, block)

            prefix = "üîÑ [INIT]" if init_mode else "üì©"
            logging.info(
                f"{prefix} [{name}] {action} id={mid} (v{versions[name][mid]}) | "
                f"–î–∞—Ç–∞ {date} | –î–æ–≤–∂–∏–Ω–∞ –±–ª–æ–∫—É {len(block)}"
            )
            logging.info(f"üíæ [{name}] –û–Ω–æ–≤–ª–µ–Ω–æ —Ñ–∞–π–ª —É Supabase ‚úÖ")

        # === –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è ‚Äî –ø—ñ–¥—Ç—è–≥–Ω—É—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 10 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ===
        logging.info("üìä –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è: –∑—á–∏—Ç—É—é –æ—Å—Ç–∞–Ω–Ω—ñ 10 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ –∫–æ–∂–Ω–æ–≥–æ –∫–∞–Ω–∞–ª—É...")
        for name, ref in CHANNELS.items():
            try:
                ent = await client.get_entity(ref)
                count = 0
                async for msg in client.iter_messages(ent, limit=10):
                    await handle_message(msg, name, init_mode=True)
                    count += 1
                logging.info(f"üìó [{name}] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ {count} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.")
            except Exception as e:
                logging.error(f"‚ö†Ô∏è –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è {name} –Ω–µ –≤–¥–∞–ª–∞—Å—è: {e}")

        # === –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –∫–∞–Ω–∞–ª—ñ–≤ —É —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ ===
        for name, ref in CHANNELS.items():
            try:
                ent = await client.get_entity(ref)
                logging.info(f"üì° –ß–∏—Ç–∞—é –∫–∞–Ω–∞–ª: {name} ({ref}) ‚Äî –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å...")
            except Exception as e:
                logging.error(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ entity –¥–ª—è {name}: {e}")
                continue

            @client.on(events.NewMessage(chats=[ent]))
            async def new_message(event, _n=name):
                await handle_message(event.message, _n)

            @client.on(events.MessageEdited(chats=[ent]))
            async def edited_message(event, _n=name):
                await handle_message(event.message, _n)

        logging.info("‚úÖ –£—Å—ñ –∫–∞–Ω–∞–ª–∏ –∞–∫—Ç–∏–≤–Ω—ñ. –û—á—ñ–∫—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è...")
        asyncio.create_task(heartbeat(versions))
        await client.run_until_disconnected()


# === –†–ï–°–¢–ê–†–¢–ï–† ===
if __name__ == "__main__":
    backoff = 5
    while True:
        try:
            asyncio.run(main())
        except Exception as e:
            logging.exception("üí• –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: %s", e)
            logging.info(f"‚ôªÔ∏è –†–µ—Å—Ç–∞—Ä—Ç —á–µ—Ä–µ–∑ {backoff} —Å–µ–∫...")
            asyncio.run(asyncio.sleep(backoff))
            backoff = min(backoff * 2, 60)
        else:
            backoff = 5
