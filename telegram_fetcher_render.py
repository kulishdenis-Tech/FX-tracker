# === telegram_fetcher_render.py ===
import os
import asyncio
import logging
from datetime import datetime
from telethon import TelegramClient, events
from telethon.sessions import StringSession
from storage_utils import save_to_supabase  # —Ç–≤–æ—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è

# ======== –õ–û–ì–ò ========
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
)

# ======== –ó–ú–Ü–ù–ù–Ü –°–ï–†–ï–î–û–í–ò–©–ê ========
API_ID = int(os.getenv("TG_API_ID", "0"))
API_HASH = os.getenv("TG_API_HASH", "")
USER_SESSION = os.getenv("TG_USER_SESSION", "")
SUPABASE_URL = os.getenv("SUPABASE_URL", "")
SUPABASE_SERVICE_ROLE_KEY = os.getenv("SUPABASE_SERVICE_ROLE_KEY", "")

# —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª—ñ–≤ (—á–µ—Ä–µ–∑ –∫–æ–º—É)
CHANNELS_RAW = os.getenv("CHANNELS", "@mirvaluty,@obmen_kyiv")
CHANNELS = [x.strip() for x in CHANNELS_RAW.split(",") if x.strip()]

# ======== –ü–ï–†–ï–í–Ü–†–ö–ê –ù–ê–Ø–í–ù–û–°–¢–Ü ========
if not all([API_ID, API_HASH, USER_SESSION, SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY]):
    logging.error("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞. –ü–µ—Ä–µ–≤—ñ—Ä –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Render ENV.")
    raise SystemExit(1)

# ======== –°–¢–í–û–†–ï–ù–ù–Ø –ö–õ–Ü–Ñ–ù–¢–ê ========
def make_client() -> TelegramClient:
    try:
        return TelegramClient(StringSession(USER_SESSION), API_ID, API_HASH)
    except Exception as e:
        logging.exception("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ Telegram –∫–ª—ñ—î–Ω—Ç–∞: %s", e)
        raise

# ======== –û–°–ù–û–í–ù–ê –§–£–ù–ö–¶–Ü–Ø ========
async def run():
    client = make_client()
    await client.connect()
    logging.info("üîå –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Telegram –≤–∏–∫–æ–Ω–∞–Ω–æ")

    if not await client.is_user_authorized():
        logging.error("‚ùå USER_SESSION –Ω–µ–¥—ñ–π—Å–Ω–∏–π. –ó–≥–µ–Ω–µ—Ä—É–π –Ω–æ–≤–∏–π TG_USER_SESSION.")
        return

    logging.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞")
    logging.info(f"üì° –°–ª—É—Ö–∞—î–º–æ –∫–∞–Ω–∞–ª–∏: {', '.join(CHANNELS)}")

    @client.on(events.NewMessage(chats=CHANNELS))
    async def handler(event):
        try:
            chat = getattr(event.chat, "username", "–Ω–µ–≤—ñ–¥–æ–º–æ")
            text = event.message.message or ""
            ts = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            logging.info(f"üí¨ [{chat}] {text[:100].replace(chr(10), ' ')}")

            await save_to_supabase(
                chat=chat,
                message=text,
                timestamp=ts,
            )

        except Exception as e:
            logging.exception("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: %s", e)

    logging.info("üöÄ Worker –∑–∞–ø—É—â–µ–Ω–æ. –û—á—ñ–∫—É—î–º–æ –Ω–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")
    await client.run_until_disconnected()

# ======== –¶–ò–ö–õ –ó –ê–í–¢–û–†–ï–°–¢–ê–†–¢–û–ú ========
if __name__ == "__main__":
    delay = 5
    while True:
        try:
            asyncio.run(run())
        except Exception as e:
            logging.exception("‚ùó Worker –≤–ø–∞–≤: %s", e)
            logging.info("‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ %s —Å–µ–∫...", delay)
            asyncio.run(asyncio.sleep(delay))
            delay = min(delay * 2, 60)
        else:
            delay = 5
