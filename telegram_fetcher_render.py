# === telegram_fetcher_render.py ===
# –í–µ—Ä—Å—ñ—è –¥–ª—è Render Background Worker
# –°–ª—É—Ö–∞—î Telegram –∫–∞–Ω–∞–ª–∏ —ñ –∑–±–µ—Ä—ñ–≥–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É Supabase Storage (bucket 'raw')

import os
import re
import asyncio
import logging
from datetime import datetime
from zoneinfo import ZoneInfo
from telethon import TelegramClient, events
from telethon.sessions import StringSession
from storage_utils import save_to_supabase

# ======== –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–≤ ========
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
)

# ======== –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ (Render ENV) ========
API_ID = int(os.getenv("TG_API_ID", "0"))
API_HASH = os.getenv("TG_API_HASH", "")
USER_SESSION = os.getenv("TG_USER_SESSION", "")
TZ = ZoneInfo("Europe/Kyiv")

if not API_ID or not API_HASH or not USER_SESSION:
    logging.error("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤—ñ TG_API_ID / TG_API_HASH / TG_USER_SESSION.")
    raise SystemExit(1)

# ======== –ö–∞–Ω–∞–ª–∏ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É ========
CHANNELS = {
    "MIRVALUTY": "@mirvaluty",
    "GARANT": "@obmen_kyiv",
    "KIT_GROUP": "@obmenka_kievua",
    "CHANGE_KYIV": "@kiev_change",
    "VALUTA_KIEV": "@valuta_kiev",
    "UACOIN": "@uacoin",
    "SWAPS": "@Obmen_usd",
}

HISTORY_LIMIT = 200


# ======== –î–æ–ø–æ–º—ñ–∂–Ω—ñ ========
def now_str():
    return datetime.now(TZ).strftime("%Y-%m-%d %H:%M:%S")


def local_dt(dt):
    return dt.astimezone(TZ).strftime("%Y-%m-%d %H:%M:%S") if dt else ""


def build_block(channel_name, message_id, version, date, edited, text):
    """–§–æ—Ä–º—É—î –±–ª–æ–∫ —è–∫ —É –ª–æ–∫–∞–ª—å–Ω–æ–º—É RAW"""
    block = (
        "=" * 100 + "\n"
        + f"[CHANNEL] {channel_name}\n"
        + f"[MESSAGE_ID] {message_id}\n"
        + f"[VERSION] v{version}\n"
        + f"[DATE] {date}\n"
    )
    if edited:
        block += f"[EDITED] {edited}\n"
    block += (
        "-" * 100 + "\n"
        + (text.strip() if text else "[NO TEXT]") + "\n"
        + "=" * 100 + "\n\n"
    )
    return block


# ======== –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ ========
async def parse_message(message, channel_name, versions):
    text = message.message or ""
    msg_id = str(message.id)
    date = local_dt(message.date)
    edited = local_dt(message.edit_date) if message.edit_date else ""

    # –Ω–æ–≤–∞ –∞–±–æ –æ–Ω–æ–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è
    if msg_id in versions and edited:
        versions[msg_id] += 1
    elif msg_id not in versions:
        versions[msg_id] = 1
    else:
        return

    block = build_block(channel_name, msg_id, versions[msg_id], date, edited, text)
    await save_to_supabase(channel_name, block)
    logging.info(f"[{channel_name}] id={msg_id} v{versions[msg_id]} –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")


async def get_entity_safe(client, ref):
    try:
        if isinstance(ref, int) or str(ref).startswith("-100"):
            return await client.get_input_entity(ref)
        else:
            return await client.get_entity(ref)
    except Exception as e:
        logging.warning(f"[WARN] –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ entity –¥–ª—è {ref}: {e}")
        return None


async def load_existing_versions(client, channel_name):
    """–ß–∏—Ç–∞—î —ñ—Å–Ω—É—é—á—ñ message_id ‚Üí version (—á–µ—Ä–µ–∑ –º–µ—Ç–∞–¥–∞–Ω—ñ RAW —É Supabase)"""
    # –ü–æ–∫–∏ —Å–ø—Ä–æ—â–µ–Ω–æ ‚Äî –±–µ–∑ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ Supabase, –≤–µ—Ä—Å—ñ—ó —Ñ–æ—Ä–º—É—é—Ç—å—Å—è –Ω–∞–Ω–æ–≤–æ
    return {}


async def monitor_channel(client, channel_name, ref):
    versions = await load_existing_versions(client, channel_name)
    entity = await get_entity_safe(client, ref)
    if not entity:
        logging.error(f"[ERROR] –ü—Ä–æ–ø—É—Å–∫ {channel_name}: –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.")
        return

    logging.info(f"üì° –ó–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É {channel_name}")

    @client.on(events.NewMessage(chats=[entity]))
    async def new_handler(event):
        await parse_message(event.message, channel_name, versions)

    @client.on(events.MessageEdited(chats=[entity]))
    async def edit_handler(event):
        await parse_message(event.message, channel_name, versions)


async def main():
    logging.info("üöÄ Telegram Fetcher –∑–∞–ø—É—â–µ–Ω–æ (Render Worker Mode)")
    client = TelegramClient(StringSession(USER_SESSION), API_ID, API_HASH)

    async with client:
        for name, ref in CHANNELS.items():
            await monitor_channel(client, name, ref)
        logging.info("‚úÖ –£—Å—ñ –∫–∞–Ω–∞–ª–∏ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω—ñ, –æ—á—ñ–∫—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
        await client.run_until_disconnected()


if __name__ == "__main__":
    delay = 5
    while True:
        try:
            asyncio.run(main())
        except Exception as e:
            logging.exception("‚ùå Worker –≤–ø–∞–≤: %s", e)
            logging.info("‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ %s —Å–µ–∫...", delay)
            asyncio.run(asyncio.sleep(delay))
            delay = min(delay * 2, 60)
        else:
            delay = 5
