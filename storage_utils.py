# === storage_utils.py ===
# –ó–±–µ—Ä—ñ–≥–∞—î RAW –±–ª–æ–∫–∏ —É Supabase Storage ‚Üí bucket 'raw'
import os
import logging
from supabase import create_client, Client

SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_SERVICE_ROLE_KEY = os.getenv("SUPABASE_SERVICE_ROLE_KEY")

if not SUPABASE_URL or not SUPABASE_SERVICE_ROLE_KEY:
    logging.error("‚ùå –ù–µ –∑–∞–¥–∞–Ω—ñ SUPABASE_URL –∞–±–æ SUPABASE_SERVICE_ROLE_KEY.")
    raise SystemExit(1)

try:
    supabase: Client = create_client(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY)
    logging.info("‚úÖ Supabase –∫–ª—ñ—î–Ω—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ (bucket 'raw').")
except Exception as e:
    logging.exception("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ Supabase: %s", e)
    raise


async def save_to_supabase(channel_name: str, block: str):
    """
    –î–æ–¥–∞—î –±–ª–æ–∫ –∑–≤–µ—Ä—Ö—É —É —Ñ–∞–π–ª Supabase Storage:
      raw/{CHANNEL}_raw.txt
    """
    try:
        filename = f"{channel_name.upper()}_raw.txt"

        # 1Ô∏è‚É£ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —ñ—Å–Ω—É—é—á–∏–π –≤–º—ñ—Å—Ç
        try:
            existing_bytes = supabase.storage.from_("raw").download(filename)
            existing_text = existing_bytes.decode("utf-8")
        except Exception:
            existing_text = ""

        # 2Ô∏è‚É£ –ù–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –∑–≤–µ—Ä—Ö—É
        new_content = block + existing_text

        # 3Ô∏è‚É£ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–∑–∞–¥ —É Storage
        supabase.storage.from_("raw").upload(
            filename,
            new_content.encode("utf-8"),
            upsert=True
        )

        logging.info(f"üóÑÔ∏è –û–Ω–æ–≤–ª–µ–Ω–æ Supabase —Ñ–∞–π–ª: raw/{filename}")

    except Exception as e:
        logging.exception("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å—ñ —É Supabase Storage (raw): %s", e)
