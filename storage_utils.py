import os, logging
from supabase import create_client, Client

SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_SERVICE_ROLE_KEY = os.getenv("SUPABASE_SERVICE_ROLE_KEY")
if not SUPABASE_URL or not SUPABASE_SERVICE_ROLE_KEY:
    logging.error("‚ùå SUPABASE_URL / SUPABASE_SERVICE_ROLE_KEY –≤—ñ–¥—Å—É—Ç–Ω—ñ")
    raise SystemExit(1)

supabase: Client = create_client(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY)
logging.info("‚úÖ Supabase –∫–ª—ñ—î–Ω—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ (bucket 'raw').")

def _read_current(filename: str) -> str:
    try:
        b = supabase.storage.from_("raw").download(filename)  # 200 OK –∞–±–æ –ø–æ–º–∏–ª–∫–∞
        return b.decode("utf-8")
    except Exception:
        return ""  # —Ñ–∞–π–ª–∞ —â–µ –Ω–µ–º–∞

async def save_to_supabase(channel_name: str, block: str):
    """
    –ü—Ä–µ–ø–µ–Ω–¥–∏–º–æ –±–ª–æ–∫ —É raw/{CHANNEL}_raw.txt
    - —è–∫—â–æ —Ñ–∞–π–ª —ñ—Å–Ω—É—î -> update (–ø–µ—Ä–µ–∑–∞–ø–∏—Å)
    - —è–∫—â–æ –Ω–µ–º–∞        -> upload (—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è)
    """
    filename = f"{channel_name.upper()}_raw.txt"
    try:
        old = _read_current(filename)
        new_content = (block or "") + (old or "")
        data = new_content.encode("utf-8")

        if old == "":  # —Ñ–∞–π–ª–∞ —â–µ –Ω–µ –±—É–ª–æ
            # —Å—Ç–≤–æ—Ä—é—î–º–æ
            supabase.storage.from_("raw").upload(filename, data, file_options={"contentType": "text/plain; charset=utf-8"})
            logging.info(f"üÜï –°—Ç–≤–æ—Ä–µ–Ω–æ raw/{filename}")
        else:
            # –ø–µ—Ä–µ–∑–∞–ø–∏—Å—É—î–º–æ —ñ—Å–Ω—É—é—á–∏–π
            supabase.storage.from_("raw").update(filename, data, file_options={"contentType": "text/plain; charset=utf-8"})
            logging.info(f"‚ôªÔ∏è –û–Ω–æ–≤–ª–µ–Ω–æ raw/{filename}")

    except Exception as e:
        logging.exception("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É —É Supabase Storage (raw/%s): %s", filename, e)
