import os
import logging
import time
from supabase import create_client, Client
from storage3.exceptions import StorageApiError

# === 1. ENV ===
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_SERVICE_ROLE_KEY = os.getenv("SUPABASE_SERVICE_ROLE_KEY")

if not SUPABASE_URL or not SUPABASE_SERVICE_ROLE_KEY:
    logging.error("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ SUPABASE_URL –∞–±–æ SUPABASE_SERVICE_ROLE_KEY")
    raise SystemExit(1)

# === 2. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞ ===
supabase: Client = create_client(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY)
BUCKET = "raw"

logging.info(f"‚úÖ Supabase Storage —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ (bucket: '{BUCKET}')")


# === 3. –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è ‚Äî –∑—á–∏—Ç—É–≤–∞–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ —Ñ–∞–π–ª—É ===
def read_current_file(filename: str) -> str:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ç–æ—á–Ω–∏–π –≤–º—ñ—Å—Ç —Ñ–∞–π–ª—É –∑ Supabase Storage, —è–∫—â–æ —ñ—Å–Ω—É—î"""
    try:
        data = supabase.storage.from_(BUCKET).download(filename)
        return data.decode("utf-8")
    except Exception:
        return ""


# === 4. –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø–∏—Å—É ===
async def save_to_supabase(channel_name: str, new_block: str):
    """
    –î–æ–¥–∞—î –Ω–æ–≤–∏–π –±–ª–æ–∫ —É –ø–æ—á–∞—Ç–æ–∫ RAW-—Ñ–∞–π–ª—É (–æ–Ω–æ–≤–ª—é—î –∞–±–æ —Å—Ç–≤–æ—Ä—é—î –π–æ–≥–æ –≤ Supabase Storage).
    """
    filename = f"{channel_name.upper()}_raw.txt"
    retries = 3

    for attempt in range(1, retries + 1):
        try:
            old_content = read_current_file(filename)
            new_content = (new_block or "") + (old_content or "")
            data = new_content.encode("utf-8")

            # —Å–ø—Ä–æ–±—É—î–º–æ upload ‚Äî —è–∫—â–æ —Ñ–∞–π–ª —ñ—Å–Ω—É—î, –±—É–¥–µ 409 (Duplicate)
            try:
                supabase.storage.from_(BUCKET).upload(
                    filename,
                    data,
                    file_options={"contentType": "text/plain; charset=utf-8"}
                )
                logging.info(f"üÜï [{channel_name}] –°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π —Ñ–∞–π–ª {filename}")
            except StorageApiError as e:
                if e.args and "Duplicate" in str(e):
                    # –æ–Ω–æ–≤–ª—é—î–º–æ —Ñ–∞–π–ª —è–∫—â–æ –≤–∂–µ —ñ—Å–Ω—É—î
                    supabase.storage.from_(BUCKET).update(
                        filename,
                        data,
                        file_options={"contentType": "text/plain; charset=utf-8"}
                    )
                    logging.info(f"‚ôªÔ∏è [{channel_name}] –û–Ω–æ–≤–ª–µ–Ω–æ —ñ—Å–Ω—É—é—á–∏–π —Ñ–∞–π–ª {filename}")
                else:
                    raise

            return  # —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ‚Äî –≤–∏—Ö—ñ–¥

        except Exception as e:
            logging.error(f"‚ö†Ô∏è [{channel_name}] –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É (—Å–ø—Ä–æ–±–∞ {attempt}/{retries}): {e}")
            if attempt < retries:
                sleep_time = attempt * 3
                logging.info(f"üîÅ –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {sleep_time} —Å–µ–∫...")
                time.sleep(sleep_time)
            else:
                logging.exception(f"‚ùå [{channel_name}] –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø–∏—Å–∞—Ç–∏ –ø—ñ—Å–ª—è {retries} —Å–ø—Ä–æ–±.")
